version: '3.7'

services:
  eureka-server:
    container_name: eureka-server
    build:
        context: ./eureka-server
        dockerfile: Dockerfile
    image: 'eureka-server:latest'
    ports:
      - '8761:8761'
    environment:
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
    networks:
      - qr-app-network

  api-gateway:
    container_name: api-gateway
    build:
        context: ./api-gateway
        dockerfile: Dockerfile
    image: 'api-gateway:latest'
    ports:
      - '8889:8889'
    environment:
      - spring.application.name=gateway-service
      - spring.cloud.gateway.routes[0].id=user-service
      - spring.cloud.gateway.routes[0].uri=lb://user-service
      - spring.cloud.gateway.routes[0].predicates[0]=Path=/seller/**, /customer/**
      - spring.cloud.gateway.routes[1].id=transaction-service
      - spring.cloud.gateway.routes[1].uri=lb://transaction-service
      - spring.cloud.gateway.routes[1].predicates[0]=Path=/customer-transaction/**, /seller-transaction/**
      - spring.cloud.gateway.routes[2].id=wallet-service
      - spring.cloud.gateway.routes[2].uri=lb://wallet-service
      - spring.cloud.gateway.routes[2].predicates[0]=Path=/customer-wallet/**, /seller-wallet/**
      - spring.cloud.gateway.discovery.locator.enabled=true
      - spring.cloud.gateway.globalcors.corsConfigurations[0].allowedOrigins=*
      - spring.cloud.gateway.globalcors.corsConfigurations[0].allowedMethods=*
      - spring.cloud.gateway.globalcors.corsConfigurations[0].allowedHeaders=*
      - spring.cloud.gateway.globalcors.corsConfigurations[0].allowCredentials=true
      - server.port=8889
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
      - eureka.client.register-with-eureka=true
      - eureka.instance.prefer-ip-address=true
    depends_on:
      - eureka-server
    networks:
      - qr-app-network

  user-service:
    container_name: user-service
    build:
        context: ./user-service
        dockerfile: Dockerfile
    image: 'user-service:latest'
    ports:
      - '8081:8081'
    environment:
      - spring.datasource.url=jdbc:mysql://mysql-database:3306/userdb?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - spring.datasource.username=root
      - spring.datasource.password=root123
      - server.port=8081
      - spring.application.name=user-service
      - eureka.instance.prefer-ip-address=true
      - eureka.client.register-with-eureka=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    depends_on:
      - mysql-database
      - eureka-server
      - api-gateway
    networks:
      - qr-app-network

  transaction-service:
    container_name: transaction-service
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
    image: 'transaction-service:latest'
    ports:
      - '8082:8082'
    environment:
      - spring.datasource.url=jdbc:mysql://mysql-database:3306/transactiondb?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - spring.datasource.username=root
      - spring.datasource.password=root123
      - server.port=8082
      - spring.application.name=transaction-service
      - eureka.instance.prefer-ip-address=true
      - eureka.client.register-with-eureka=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    depends_on:
      - mysql-database
      - eureka-server
      - api-gateway
    networks:
      - qr-app-network

  wallet-service:
    container_name: wallet-service
    build:
        context: ./wallet-service
        dockerfile: Dockerfile
    image: 'wallet-service:latest'
    ports:
      - '8083:8083'
    environment:
      - spring.datasource.url=jdbc:mysql://mysql-database:3306/walletdb?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - spring.datasource.username=root
      - spring.datasource.password=root123
      - server.port=8083
      - spring.application.name=wallet-service
      - eureka.instance.prefer-ip-address=true
      - eureka.client.register-with-eureka=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    depends_on:
      - mysql-database
      - eureka-server
      - api-gateway
    networks:
      - qr-app-network

  notification-service:
    container_name: notification-service
    build:
        context: ./notification-service
        dockerfile: Dockerfile
    image: 'notification-service:latest'
    ports:
      - '8084:8084'
    environment:
      - server.port=8084
      - spring.application.name=notification-service
      - eureka.instance.prefer-ip-address=true
      - eureka.client.register-with-eureka=true
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - spring.kafka.bootstrap-servers=kafka:9092
      - spring.kafka.template.default-topic=seller-transaction
      - spring.kafka.consumer.group-id= notificationId
      - spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
      - spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
      - spring.kafka.consumer.properties.spring.json.type.mapping=event:com.emresahna.notificationservice.dto.SellerTransactionNotificationRequest
      - spring.mail.host=smtp.gmail.com
      - spring.mail.port=587
      - spring.mail.username=quickpayr@gmail.com
      - spring.mail.password=hcmtxgizdpjlynzt
      - spring.mail.properties.mail.smtp.auth=true
      - spring.mail.properties.mail.smtp.starttls.enable=true
      - spring.thymeleaf.prefix=classpath:/templates/
      - spring.thymeleaf.suffix=.html
    depends_on:
      - kafka
      - eureka-server
      - api-gateway
    networks:
      - qr-app-network

  mysql-database:
    container_name: mysql-database
    image: 'mysql:latest'
    restart: always
    ports:
      - '3306:3306'
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_PASSWORD: root123
    networks:
      - qr-app-network

  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - qr-app-network

networks:
  qr-app-network:
    driver: bridge

volumes:
  mysql-data:
